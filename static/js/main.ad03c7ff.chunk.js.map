{"version":3,"sources":["App.js","utils/Employee/Employee.js","serviceWorker.js","index.js"],"names":["App","createContext","Emplist","Emp","id","handleInputChange","handleSearchEmp","state","first_name","last_name","email","gender","_ref","target","_this","setState","Object","defineProperty","name","value","event","preventDefault","JSON","parse","stringify","find","_ref2","react_default","a","createElement","Fragment","className","this","map","i","key","htmlFor","onChange","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOA+NeA,GC7NEC,wBAAc,CAC7BC,QAAS,GACTC,IAAK,GACLC,GAAI,GACJC,kBAAmB,aACnBC,gBAAiB,gODCjBC,MAAQ,CACNL,QAAS,CAAC,CACRE,GAAM,EACNI,WAAc,KACdC,UAAa,SACbC,MAAS,wBACTC,OAAU,UACT,CACDP,GAAM,EACNI,WAAc,OACdC,UAAa,SACbC,MAAS,uBACTC,OAAU,QACT,CACDP,GAAM,EACNI,WAAc,QACdC,UAAa,UACbC,MAAS,8BACTC,OAAU,QACT,CACDP,GAAM,EACNI,WAAc,MACdC,UAAa,UACbC,MAAS,sBACTC,OAAU,UACT,CACDP,GAAM,EACNI,WAAc,SACdC,UAAa,SACbC,MAAS,2BACTC,OAAU,QACT,CACDP,GAAM,EACNI,WAAc,UACdC,UAAa,UACbC,MAAS,4BACTC,OAAU,UACT,CACDP,GAAM,EACNI,WAAc,WACdC,UAAa,OACbC,MAAS,qBACTC,OAAU,UACT,CACDP,GAAM,EACNI,WAAc,WACdC,UAAa,YACbC,MAAS,yBACTC,OAAU,UACT,CACDP,GAAM,EACNI,WAAc,SACdC,UAAa,UACbC,MAAS,0BACTC,OAAU,UACT,CACDP,GAAM,GACNI,WAAc,UACdC,UAAa,cACbC,MAAS,gCACTC,OAAU,QACT,CACDP,GAAM,GACNI,WAAc,QACdC,UAAa,WACbC,MAAS,4BACTC,OAAU,QACT,CACDP,GAAM,GACNI,WAAc,SACdC,UAAa,gBACbC,MAAS,gCACTC,OAAU,UACT,CACDP,GAAM,GACNI,WAAc,QACdC,UAAa,OACbC,MAAS,oBACTC,OAAU,UACT,CACDP,GAAM,GACNI,WAAc,QACdC,UAAa,OACbC,MAAS,oBACTC,OAAU,QACT,CACDP,GAAM,GACNI,WAAc,OACdC,UAAa,aACbC,MAAS,8BACTC,OAAU,QACT,CACDP,GAAM,GACNI,WAAc,QACdC,UAAa,UACbC,MAAS,oBACTC,OAAU,UACT,CACDP,GAAM,GACNI,WAAc,QACdC,UAAa,cACbC,MAAS,kCACTC,OAAU,QACT,CACDP,GAAM,GACNI,WAAc,WACdC,UAAa,aACbC,MAAS,uBACTC,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","file":"static/js/main.ad03c7ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport InfoCard from './components/InfoCard'\nimport SearchBar from './components/SearchBar'\n// import Employee from './utils/Employee'\nimport './App.css'\n\nclass App extends Component {\n\n  state = {\n    Emplist: [{\n      \"id\": 1,\n      \"first_name\": \"Vi\",\n      \"last_name\": \"Gadney\",\n      \"email\": \"vgadney0@virginia.edu\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 2,\n      \"first_name\": \"Leon\",\n      \"last_name\": \"Proger\",\n      \"email\": \"lproger1@alibaba.com\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 3,\n      \"first_name\": \"Eugen\",\n      \"last_name\": \"Sambles\",\n      \"email\": \"esambles2@blogtalkradio.com\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 4,\n      \"first_name\": \"Lea\",\n      \"last_name\": \"Delaney\",\n      \"email\": \"ldelaney3@apple.com\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 5,\n      \"first_name\": \"Durant\",\n      \"last_name\": \"Warner\",\n      \"email\": \"dwarner4@theatlantic.com\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 6,\n      \"first_name\": \"Eugenia\",\n      \"last_name\": \"Dishmon\",\n      \"email\": \"edishmon5@nydailynews.com\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 7,\n      \"first_name\": \"Engracia\",\n      \"last_name\": \"Lyte\",\n      \"email\": \"elyte6@comsenz.com\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 8,\n      \"first_name\": \"Roseanne\",\n      \"last_name\": \"Alexandre\",\n      \"email\": \"ralexandre7@jalbum.net\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 9,\n      \"first_name\": \"Lynsey\",\n      \"last_name\": \"Johnsey\",\n      \"email\": \"ljohnsey8@cafepress.com\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 10,\n      \"first_name\": \"Yardley\",\n      \"last_name\": \"Filipchikov\",\n      \"email\": \"yfilipchikov9@arstechnica.com\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 11,\n      \"first_name\": \"Nolly\",\n      \"last_name\": \"Hubbucke\",\n      \"email\": \"nhubbuckea@opensource.org\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 12,\n      \"first_name\": \"Dorise\",\n      \"last_name\": \"Di Franceshci\",\n      \"email\": \"ddifranceshcib@vistaprint.com\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 13,\n      \"first_name\": \"Camel\",\n      \"last_name\": \"Lude\",\n      \"email\": \"cludec@flickr.com\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 14,\n      \"first_name\": \"Matty\",\n      \"last_name\": \"Boni\",\n      \"email\": \"mbonid@weebly.com\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 15,\n      \"first_name\": \"Ivar\",\n      \"last_name\": \"Janczewski\",\n      \"email\": \"ijanczewskie@shutterfly.com\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 16,\n      \"first_name\": \"Celie\",\n      \"last_name\": \"Dodshon\",\n      \"email\": \"cdodshonf@msu.edu\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 17,\n      \"first_name\": \"Odell\",\n      \"last_name\": \"Crassweller\",\n      \"email\": \"ocrasswellerg@independent.co.uk\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 18,\n      \"first_name\": \"Federica\",\n      \"last_name\": \"O'Hollegan\",\n      \"email\": \"foholleganh@yale.edu\",\n      \"gender\": \"Female\"\n    }, {\n      \"id\": 19,\n      \"first_name\": \"Aymer\",\n      \"last_name\": \"Mayo\",\n      \"email\": \"amayoi@hostgator.com\",\n      \"gender\": \"Male\"\n    }, {\n      \"id\": 20,\n      \"first_name\": \"Karine\",\n      \"last_name\": \"Bullerwell\",\n      \"email\": \"kbullerwellj@google.nl\",\n      \"gender\": \"Female\"\n    }],\n    Emp: {},\n    id: '',\n\n\n\n  }\n\n  handleInputChange = ({ target }) => {\n    // console.log(target)\n    this.setState({ [target.name]: target.value })\n  }\n  handleSearchEmp = event => {\n    event.preventDefault()\n    let Emplist = JSON.parse(JSON.stringify(this.state.Emplist))\n    let Emp = Emplist.find(({id})=>\n     id===JSON.parse(this.state.id)\n    )\n    this.setState({Emp, id:''})\n   }\n\n  render() {\n    return (\n      <>\n        {/* <Employee.Provider value={this.state} > */}\n        <div className=\"jumbotron jumbotron-fluid text-white bg-info mb-3\">\n          <div className=\"container\">\n            <h1 className=\"display-4 font-weight-bold\">Employee Directory</h1>\n            <p className=\"lead font-weight-bold\">Please search your employee by id.</p>\n          </div>\n        </div>\n\n\n        <div className=\"row row-cols-1 row-cols-md-2\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">Employee List As Follows:</h5>\n              <div className=\"card-text\">\n                <ul className=\"list-group\">\n                  {\n                    this.state.Emplist.map((Emp, i) => (\n                      <li key={i} className=\"list-group-item \">\n                        ID: {Emp.id}  <br /> Name: {Emp.first_name} {Emp.last_name}\n                      </li>\n                    ))\n                  }\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card \">\n            <div className=\"h-10\">\n              <form className=\"form-inline card-title\">\n                <div className=\"form-group mx-sm-3 mb-2\">\n                  <label htmlFor=\"id\">ID number: </label>\n                  <input\n                    onChange={this.handleInputChange}\n                    type=\"text\"\n                    name=\"id\"\n                    value={this.state.id}\n                  />\n                </div>\n                <button \n                className=\"btn btn-primary mb-2\"\n                onClick={this.handleSearchEmp} >\n                  Search\n                </button>\n              </form>\n            </div>\n            {this.state.Emp.id ? (<div className=\"card\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">ID: {this.state.Emp.id}</h5>\n                <h6>First Name: {this.state.Emp.first_name}</h6>\n                <h6>Last Name: {this.state.Emp.last_name}</h6>\n                <h6>Email: {this.state.Emp.email}</h6>\n                <h6>Gender: {this.state.Emp.gender}</h6>\n              </div>\n            </div>) : null}\n            \n          </div>\n\n          \n          {/* <SearchBar />\n          <InfoCard /> */}\n\n        </div>\n\n      </>\n\n      // </Employee.Provider>\n    );\n  }\n}\nexport default App;\n","import React, { createContext } from 'react'\r\n\r\nconst Employee = createContext({\r\n  Emplist: [],\r\n  Emp: {},\r\n  id: '',\r\n  handleInputChange: () => { },\r\n  handleSearchEmp: () => { }\r\n})\r\n\r\nexport default Employee","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}